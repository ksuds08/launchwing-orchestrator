name: Deploy Orchestrator to Cloudflare Workers

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      # Keep npm from failing on peer-dep noise
      NPM_CONFIG_LEGACY_PEER_DEPS: "true"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      # Install root + workspaces (use install instead of ci due to fresh lock)
      - name: Install deps
        run: npm install --no-audit --no-fund

      # Build the SPA and copy to /public (root script drives the app workspace)
      - name: Build SPA â†’ public/
        run: npm run build

      - name: Typecheck
        run: npm run typecheck

      # Lint is non-blocking for now
      - name: Lint (non-blocking)
        run: npm run lint || true

      # -------- Inject Cloudflare secrets into the Worker BEFORE deploy --------
      # We deploy the orchestrator Worker with an API token, but at runtime the
      # Worker itself will call the Services API using Global API Key + Email
      # (preferred) or fall back to API Token if the key isn't present.
      - name: Set Worker Secrets (account+token)
        env:
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npx --yes wrangler@4.28.1 --version
          yes | npx wrangler@4.28.1 secret delete CLOUDFLARE_API_TOKEN  --name launchwing-orchestrator || true
          yes | npx wrangler@4.28.1 secret delete CLOUDFLARE_ACCOUNT_ID --name launchwing-orchestrator || true
          printf "%s" "$CLOUDFLARE_API_TOKEN"  | npx wrangler@4.28.1 secret put CLOUDFLARE_API_TOKEN  --name launchwing-orchestrator
          printf "%s" "$CLOUDFLARE_ACCOUNT_ID" | npx wrangler@4.28.1 secret put CLOUDFLARE_ACCOUNT_ID --name launchwing-orchestrator

      - name: Set Worker Secrets (Global API Key auth for Services API)
        if: ${{ secrets.CLOUDFLARE_EMAIL != '' && secrets.CLOUDFLARE_API_KEY != '' }}
        env:
          CLOUDFLARE_EMAIL:   ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
        run: |
          npx --yes wrangler@4.28.1 --version
          yes | npx wrangler@4.28.1 secret delete CLOUDFLARE_EMAIL   --name launchwing-orchestrator || true
          yes | npx wrangler@4.28.1 secret delete CLOUDFLARE_API_KEY --name launchwing-orchestrator || true
          printf "%s" "$CLOUDFLARE_EMAIL"   | npx wrangler@4.28.1 secret put CLOUDFLARE_EMAIL   --name launchwing-orchestrator
          printf "%s" "$CLOUDFLARE_API_KEY" | npx wrangler@4.28.1 secret put CLOUDFLARE_API_KEY --name launchwing-orchestrator

      # ------------------------------- Deploy ---------------------------------
      - name: Deploy (wrangler)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: "4.28.1"
          command: deploy

      # --------------------------- Post-deploy check ---------------------------
      - name: Health check
        env:
          CF_WORKERS_SUBDOMAIN: ${{ vars.CF_WORKERS_SUBDOMAIN }}
        run: |
          SUBDOMAIN="${CF_WORKERS_SUBDOMAIN:-promptpulse}"
          URL="https://launchwing-orchestrator.${SUBDOMAIN}.workers.dev/health"
          echo "Hitting $URL"
          curl -fsS "$URL" | tee /tmp/health.json
          jq -e '.ok == true' /tmp/health.json