name: Deploy SPA to Cloudflare Pages

on:
  push:
    branches: [main]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NPM_CONFIG_LEGACY_PEER_DEPS: "true"
      CF_PAGES_PROJECT: "launchwing-app"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install deps (workspaces ok)
        run: npm install --no-audit --no-fund -ws

      - name: Build SPA ‚Üí app/dist
        run: npm run -w app build

      # üîß Inject Pages Advanced Mode worker (handles OPTIONS + proxies /api/*)
      - name: Write _worker.js (Pages Advanced proxy with CORS)
        run: |
          cat > app/dist/_worker.js <<'JS'
          const ORCH = "https://launchwing-orchestrator.promptpulse.workers.dev";

          function corsHeaders() {
            return {
              "Access-Control-Allow-Origin": "*",
              "Access-Control-Allow-Methods": "GET,POST,OPTIONS",
              "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With",
              "Vary": "Origin",
            };
          }

          function corsPreflight() {
            return new Response(null, { status: 204, headers: corsHeaders() });
          }

          async function serveSPA(req, env) {
            // Try exact asset
            const res = await env.ASSETS.fetch(req);
            if (res.status !== 404) return res;

            // SPA fallback to /index.html for GET/HEAD + HTML
            const accepts = req.headers.get("accept") || "";
            const isGetLike = req.method === "GET" || req.method === "HEAD";
            if (isGetLike && accepts.includes("text/html")) {
              const url = new URL(req.url);
              const indexReq = new Request(new URL("/index.html", url), req);
              const indexRes = await env.ASSETS.fetch(indexReq);
              if (indexRes.status !== 404) return indexRes;
            }
            return res;
          }

          export default {
            async fetch(req, env) {
              const url = new URL(req.url);

              // Handle API routes (and preflight)
              if (url.pathname.startsWith("/api/")) {
                if (req.method === "OPTIONS") return corsPreflight();

                const upstream = new URL(url.pathname.replace(/^\/api/, ""), ORCH);
                upstream.search = url.search;

                const init = {
                  method: req.method,
                  headers: req.headers,
                  body: (req.method === "GET" || req.method === "HEAD") ? undefined : req.body,
                  redirect: "manual",
                };

                const r = await fetch(upstream.toString(), init);

                const h = new Headers(r.headers);
                for (const [k, v] of Object.entries(corsHeaders())) h.set(k, v);

                return new Response(r.body, { status: r.status, statusText: r.statusText, headers: h });
              }

              // Static/SPA
              return serveSPA(req, env);
            },
          };
          JS

          test -f app/dist/_worker.js || (echo "ERROR: app/dist/_worker.js missing" && exit 1)

      # üìù Provide a Pages-only Wrangler config so Wrangler doesn't warn about pages_build_output_dir
      - name: Write wrangler.pages.toml
        run: |
          cat > wrangler.pages.toml <<'TOML'
          name = "launchwing-app"
          pages_build_output_dir = "app/dist"
          TOML
          test -f wrangler.pages.toml || (echo "ERROR: wrangler.pages.toml missing" && exit 1)

      # Idempotent project creation (ok if it already exists)
      - name: Create Pages project if missing
        continue-on-error: true
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: "4"
          command: >
            pages project create ${{ env.CF_PAGES_PROJECT }}
            --production-branch main
            --compatibility-date 2024-11-01

      # üöÄ Deploy with retry + explicit config to avoid reading root wrangler.toml
      - name: Deploy to Pages (Advanced Mode, with retry)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            echo "Attempt $i to deploy Pages‚Ä¶"
            npx wrangler --config wrangler.pages.toml \
              pages deploy app/dist \
              --project-name "${CF_PAGES_PROJECT}" \
              --branch main \
              --commit-dirty=true && break || true
            sleep $((i*10))
          done
          if [ "${i:-3}" -eq 3 ]; then
            echo "‚ùå Pages deploy failed after 3 attempts"
            exit 1
          fi