import { packageJson, pagesWorkerTs, readmeMd } from "./strings";
import type { Env } from "../types";

type Files = Record<string, string>;

function normalizePath(p: string) {
  return p.replace(/^\.?\//, "").replace(/\\/g, "/");
}

export function sanitizeGeneratedFiles(
  env: Env,
  input: Files,
  appName: string
): Files {
  const out: Files = {};
  for (const [rawPath, content] of Object.entries(input || {})) {
    const path = normalizePath(rawPath);
    if (!path || path.endsWith("/")) continue;
    out[path] = content;
  }

  // Ensure a minimal SPA if the agent didn't provide one
  if (!hasAny(out, ["index.html", "public/index.html"])) {
    out["index.html"] = `<!doctype html>
<html><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>${appName}</title>
</head>
<body>
  <div id="app"><h1>${appName}</h1><p>Generated by LaunchWing</p></div>
  <script type="module">
    // Minimal SPA fallback
    console.log("Hello from ${appName}");
  </script>
</body></html>`;
  }

  // Package + README for Pages build
  if (!out["package.json"]) out["package.json"] = packageJson(appName);
  if (!out["README.md"]) out["README.md"] = readmeMd(appName);

  // Inject _worker.ts to proxy /api to orchestrator
  const orchestrator = env.ORCHESTRATOR_URL || "https://your-orchestrator.workers.dev";
  out["_worker.ts"] = pagesWorkerTs(orchestrator);

  // Inject Pages deploy workflow template (consumer must keep secrets in its repo)
  out[".github/workflows/deploy-pages.yml"] = pagesWorkflowTemplate();

  // .gitignore
  if (!out[".gitignore"]) {
    out[".gitignore"] = `node_modules
dist
*.log
.DS_Store
`;
  }

  return out;
}

function hasAny(files: Files, names: string[]) {
  return names.some((n) => !!files[n]);
}

function pagesWorkflowTemplate() {
  return `name: Deploy to Cloudflare Pages

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven/sh/setup-bun@v1
      - run: bun install --frozen-lockfile || bun install
      - run: bun run build
      - run: if [ -f _worker.ts ]; then cp _worker.ts dist/_worker.ts; fi
      - name: Deploy with Wrangler
        env:
          CLOUDFLARE_API_TOKEN: \${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: \${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: npx wrangler@4 pages deploy dist --project-name "\${{ github.event.repository.name }}"`;
}